-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from ParLL.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pDef -> Def                                 (0)
	Ident -> L_Ident                                   (1)
	Def -> Ident '=' Term                              (2)
	Term -> '\\' Ident '.' Term                        (3)
	Term -> '\\!' Ident '.' Term                       (4)
	Term -> Term1                                      (5)
	Term2 -> Ident                                     (6)
	Term2 -> '(' Term ')'                              (7)
	Term1 -> '!' Term2                                 (8)
	Term1 -> Term1 Term2                               (9)
	Term1 -> Term2                                     (10)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'('            { PT _ (TS _ 2) }
	')'            { PT _ (TS _ 3) }
	'.'            { PT _ (TS _ 4) }
	'='            { PT _ (TS _ 5) }
	'\\'           { PT _ (TS _ 6) }
	'\\!'          { PT _ (TS _ 7) }
	L_Ident        { PT _ (TV $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pDef     rule  0
	Ident           rule  1
	Def             rule  2
	Term            rules 3, 4, 5
	Term2           rules 6, 7
	Term1           rules 8, 9, 10

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pDef -> . Def                                (rule 0)

	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Def            goto state 4

State 1

	Ident -> . L_Ident                                  (rule 1)

	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'('            reduce using rule 1
	')'            reduce using rule 1
	'.'            reduce using rule 1
	'='            reduce using rule 1
	L_Ident        reduce using rule 1
	%eof           reduce using rule 1


State 3

	Def -> Ident . '=' Term                             (rule 2)

	'='            shift, and enter state 5


State 4

	%start_pDef -> Def .                                (rule 0)

	%eof           accept


State 5

	Def -> Ident '=' . Term                             (rule 2)

	'!'            shift, and enter state 10
	'('            shift, and enter state 11
	'\\'           shift, and enter state 12
	'\\!'          shift, and enter state 13
	L_Ident        shift, and enter state 2

	Ident          goto state 6
	Term           goto state 7
	Term2          goto state 8
	Term1          goto state 9

State 6

	Term2 -> Ident .                                    (rule 6)

	'('            reduce using rule 6
	')'            reduce using rule 6
	L_Ident        reduce using rule 6
	%eof           reduce using rule 6


State 7

	Def -> Ident '=' Term .                             (rule 2)

	%eof           reduce using rule 2


State 8

	Term1 -> Term2 .                                    (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	L_Ident        reduce using rule 10
	%eof           reduce using rule 10


State 9

	Term -> Term1 .                                     (rule 5)
	Term1 -> Term1 . Term2                              (rule 9)

	'('            shift, and enter state 11
	')'            reduce using rule 5
	L_Ident        shift, and enter state 2
	%eof           reduce using rule 5

	Ident          goto state 6
	Term2          goto state 18

State 10

	Term1 -> '!' . Term2                                (rule 8)

	'('            shift, and enter state 11
	L_Ident        shift, and enter state 2

	Ident          goto state 6
	Term2          goto state 17

State 11

	Term2 -> '(' . Term ')'                             (rule 7)

	'!'            shift, and enter state 10
	'('            shift, and enter state 11
	'\\'           shift, and enter state 12
	'\\!'          shift, and enter state 13
	L_Ident        shift, and enter state 2

	Ident          goto state 6
	Term           goto state 16
	Term2          goto state 8
	Term1          goto state 9

State 12

	Term -> '\\' . Ident '.' Term                       (rule 3)

	L_Ident        shift, and enter state 2

	Ident          goto state 15

State 13

	Term -> '\\!' . Ident '.' Term                      (rule 4)

	L_Ident        shift, and enter state 2

	Ident          goto state 14

State 14

	Term -> '\\!' Ident . '.' Term                      (rule 4)

	'.'            shift, and enter state 21


State 15

	Term -> '\\' Ident . '.' Term                       (rule 3)

	'.'            shift, and enter state 20


State 16

	Term2 -> '(' Term . ')'                             (rule 7)

	')'            shift, and enter state 19


State 17

	Term1 -> '!' Term2 .                                (rule 8)

	'('            reduce using rule 8
	')'            reduce using rule 8
	L_Ident        reduce using rule 8
	%eof           reduce using rule 8


State 18

	Term1 -> Term1 Term2 .                              (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	L_Ident        reduce using rule 9
	%eof           reduce using rule 9


State 19

	Term2 -> '(' Term ')' .                             (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	L_Ident        reduce using rule 7
	%eof           reduce using rule 7


State 20

	Term -> '\\' Ident '.' . Term                       (rule 3)

	'!'            shift, and enter state 10
	'('            shift, and enter state 11
	'\\'           shift, and enter state 12
	'\\!'          shift, and enter state 13
	L_Ident        shift, and enter state 2

	Ident          goto state 6
	Term           goto state 23
	Term2          goto state 8
	Term1          goto state 9

State 21

	Term -> '\\!' Ident '.' . Term                      (rule 4)

	'!'            shift, and enter state 10
	'('            shift, and enter state 11
	'\\'           shift, and enter state 12
	'\\!'          shift, and enter state 13
	L_Ident        shift, and enter state 2

	Ident          goto state 6
	Term           goto state 22
	Term2          goto state 8
	Term1          goto state 9

State 22

	Term -> '\\!' Ident '.' Term .                      (rule 4)

	')'            reduce using rule 4
	%eof           reduce using rule 4


State 23

	Term -> '\\' Ident '.' Term .                       (rule 3)

	')'            reduce using rule 3
	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 11
Number of terminals: 8
Number of non-terminals: 6
Number of states: 24
