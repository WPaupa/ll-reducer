-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelLL where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsLL

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsLL.Ident -> Result
transIdent x = case x of
  AbsLL.Ident string -> failure x

transDef :: AbsLL.Def -> Result
transDef x = case x of
  AbsLL.Def ident term -> failure x

transTerm :: AbsLL.Term -> Result
transTerm x = case x of
  AbsLL.TLambda ident term -> failure x
  AbsLL.TLamBang ident term -> failure x
  AbsLL.TVar ident -> failure x
  AbsLL.TBang term -> failure x
  AbsLL.TApp term1 term2 -> failure x
