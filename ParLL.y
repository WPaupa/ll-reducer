-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParLL
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsLL
import LexLL

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'     { PT _ (TS _ 1)  }
  '('     { PT _ (TS _ 2)  }
  ')'     { PT _ (TS _ 3)  }
  ','     { PT _ (TS _ 4)  }
  '.'     { PT _ (TS _ 5)  }
  ';;'    { PT _ (TS _ 6)  }
  '='     { PT _ (TS _ 7)  }
  '['     { PT _ (TS _ 8)  }
  '\\'    { PT _ (TS _ 9)  }
  '\\!'   { PT _ (TS _ 10) }
  ']'     { PT _ (TS _ 11) }
  L_Ident { PT _ (TV $$)   }

%%

Ident :: { AbsLL.Ident }
Ident  : L_Ident { AbsLL.Ident $1 }

Program :: { AbsLL.Program }
Program : ListDef { AbsLL.Program $1 }

ListDef :: { [AbsLL.Def] }
ListDef
  : {- empty -} { [] }
  | Def { (:[]) $1 }
  | Def ';;' ListDef { (:) $1 $3 }

Def :: { AbsLL.Def }
Def : Ident '=' Term { AbsLL.Def $1 $3 }

Pattern :: { AbsLL.Pattern }
Pattern
  : Ident { AbsLL.PIdent $1 }
  | '[' ListPattern ']' { AbsLL.PMatch $2 }

ListPattern :: { [AbsLL.Pattern] }
ListPattern
  : {- empty -} { [] }
  | Pattern { (:[]) $1 }
  | Pattern ',' ListPattern { (:) $1 $3 }

Term :: { AbsLL.Term }
Term
  : '\\' Pattern '.' Term { AbsLL.TLambda $2 $4 }
  | '\\!' Pattern '.' Term { AbsLL.TLamBang $2 $4 }
  | Term1 { $1 }

Term1 :: { AbsLL.Term }
Term1
  : Pattern { AbsLL.TVar $1 }
  | '!' Term1 { AbsLL.TBang $2 }
  | Term Term1 { AbsLL.TApp $1 $2 }
  | '(' Term ')' { $2 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

