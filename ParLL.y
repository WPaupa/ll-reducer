-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParLL
  ( happyError
  , myLexer
  , pDef
  ) where

import Prelude

import qualified AbsLL
import LexLL

}

%name pDef Def
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'     { PT _ (TS _ 1) }
  '('     { PT _ (TS _ 2) }
  ')'     { PT _ (TS _ 3) }
  '.'     { PT _ (TS _ 4) }
  '='     { PT _ (TS _ 5) }
  '\\'    { PT _ (TS _ 6) }
  '\\!'   { PT _ (TS _ 7) }
  L_Ident { PT _ (TV $$)  }

%%

Ident :: { AbsLL.Ident }
Ident  : L_Ident { AbsLL.Ident $1 }

Def :: { AbsLL.Def }
Def : Ident '=' Term { AbsLL.Def $1 $3 }

Term :: { AbsLL.Term }
Term
  : '\\' Ident '.' Term { AbsLL.TLambda $2 $4 }
  | '\\!' Ident '.' Term { AbsLL.TLamBang $2 $4 }
  | Term1 { $1 }

Term2 :: { AbsLL.Term }
Term2 : Ident { AbsLL.TVar $1 } | '(' Term ')' { $2 }

Term1 :: { AbsLL.Term }
Term1
  : '!' Term2 { AbsLL.TBang $2 }
  | Term1 Term2 { AbsLL.TApp $1 $2 }
  | Term2 { $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

